Pattern - Matrix Traversal 
--> Using DFS or BFS
--> Logic 
- take node, and traverse
- for going to neighbour nodes -->. 4 nodes [up, down, left, right]
- Add neigh in queue(bfs) or traverse them(dfs) --> depending on requirement
- Note here diagonal elements are not traversed

Question 1- Flood Fill
Fill color in matrix from start pt (start_r,start_c) and all it's adj neighbours 
https://leetcode.com/problems/flood-fill/description/
Hint -
- Note : you didnot understand question - flood fill is only for (i,j) if it's value is equal to value given at start (start_r,start_c) ie mat[i,j] = (initialy color of )mat[start_r,start_col]
- Rest logic is same as above 
- Just mainly check the constraints
- DFS is used: Recursive solution - for each neighbour(keep neigh in for loop)


Question 2 - Find Number of Islands
Given matrix : find number of components of graph
https://leetcode.com/problems/number-of-islands/description/
hint:
- Goto each node of matrix - run dfs/bfs on it and mark visited in separate matrix
- Repeat the same for every node
- Do dfs only for those nodes which are not visited
- After each iteration increment the number of islands


Question 3 - Surrounded Regions 
Trick Question -- But very interesting -- do try 
https://leetcode.com/problems/surrounded-regions/description/
Hint -
- Instead of finding surrounded regions --> find regions which need not be surrounded 
- Traverse all edge cells of matrix- If any cell = O then do dfs and mark it as 'T'
- Revert all other 'O' to 'X' inside boundary
- Now revert all convert 'T' back to 'O' to show that they are boundry cells and couldnt be covered.
